timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}



# Powerlevel10k
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# I put local programs in .local/bin
local_bin=~/.local/bin
# export PATH=${local_bin}:$PATH
[[ ":$PATH:" != *":${local_bin}:"* ]] && export PATH="${local_bin}:${PATH}"

# Check if apps are found in non-standard directories
if command -v ${local_bin}/homebrew/bin/brew &> /dev/null; then
  export PATH=${local_bin}/homebrew/bin:$PATH
fi
if command -v ${local_bin}/homebrew/bin/byobu &> /dev/null; then
  export BYOBU_PREFIX=${local_bin}/homebrew
fi
if command -v ${local_bin}/homebrew/opt/nvm/nvm-exec &> /dev/null; then
  export NVM_DIR="$HOME/.nvm"
  export NVM_LAZY_LOAD=true
  export NVM_LAZY_LOAD_EXTRA_COMMANDS=('vim' 'neovim')
  export NVM_COMPLETION=true
fi
## nvm is lazy-loaded by zsh-nvm, no need for the following:
#   [ -s "${local_bin}/homebrew/opt/nvm/nvm.sh" ] && \. "${local_bin}/homebrew/opt/nvm/nvm.sh"  # load nvm
#  [ -s "${local_bin}/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "${local_bin}/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # load nvm bash_completion

if command -v nvim &> /dev/null; then
  alias vim="nvim"
  alias vimdiff="nvim -d"
elif command -v neovim &> /dev/null; then
  alias vim="neovim"
  alias vimdiff="neovim -d"
fi

# Load the oh-my-zsh's library.
# source ${local_bin}/antigen.zsh
# antigen use oh-my-zsh
# Bundles from the default repo (robbyrussell's oh-my-zsh).
# antigen bundle command-not-found
# antigen bundle git
# antigen bundle python
# antigen bundle pip
# antigen bundle npm
if command -v ${local_bin}/homebrew/bin/fzf &> /dev/null; then
  export FZF_BASE=${local_bin}/homebrew/opt/fzf
  # ${FZF_BASE}/install # To install useful key bindings and fuzzy completion for FZF, run once
fi
# antigen bundle fzf
if [[ `uname` == "Darwin" ]]; then
  antigen bundle macos
fi
# Bundles from other repos
# antigen bundle mroth/evalcache 	# Speeds up evals
# antigen bundle lukechilds/zsh-nvm  # Lazy-loads nvm
# antigen bundle marlonrichert/zsh-autocomplete@main
# antigen bundle zsh-users/zsh-syntax-highlighting

# antigen theme romkatv/powerlevel10k     # Load the theme.
# antigen apply   # Tell Antigen that you're done.

if [ -f "/data/largeHome/mans_is/.mambaforge/etc/profile.d/mamba.sh" ]; then
    . "/data/largeHome/mans_is/.mambaforge/etc/profile.d/mamba.sh"
fi

#####################
# ZINIT             #
#####################

##### Install Zinit if not exist 
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
### Added by Zinit's installer
if [[ ! -f ${ZINIT_HOME}/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "${ZINIT_HOME}" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "${ZINIT_HOME}/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

zinit wait lucid light-mode for \
  atinit"zicompinit; zicdreplay" \
      zdharma-continuum/fast-syntax-highlighting \
      zdharma-continuum/history-search-multi-word \
  atload'bindkey "^[[A" history-substring-search-up; bindkey "^[[B" history-substring-search-down' \
      zsh-users/zsh-history-substring-search \
  atload"_zsh_autosuggest_start" \
      zsh-users/zsh-autosuggestions \
  blockf atpull'zinit creinstall -q .' \
      zsh-users/zsh-completions

### End of Zinit's installer chunk

#####################
# STARSHIP          #
#####################
# eval "$(starship init zsh)"
# zinit ice as"command" from"gh-r" \ # `starship` binary as command, from github release
#           atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \ # starship setup at clone(create init.zsh, completion)
#           atpull"%atclone" src"init.zsh" # pull behavior same as clone, source init.zsh
# zinit light starship/starship

# Load starship theme
# zinit ice as"command" from"gh-r" \ # `starship` binary as command, from github release
#           atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \ # starship setup at clone(create init.zsh, completion)
#           atpull"%atclone" src"init.zsh" # pull behavior same as clone, source init.zsh
zinit ice as"program" from"gh-r" \
  pick"starship*/starship" \
  atload'eval "$(starship init zsh)"'
zinit light starship/starship

# A glance at the new for-syntax – load all of the above
# plugins with a single command. For more information see:
# https://zdharma-continuum.github.io/zinit/wiki/For-Syntax/
# zinit for \
#     light-mode \
#   sindresorhus/pure
#     # pick"async.zsh" \
#     # src"pure.zsh" \

# Zinit Setting
# Must Load OMZ Git library
zi snippet OMZL::git.zsh
zi snippet OMZL::history.zsh


# Load Git plugin from OMZ
zi snippet OMZP::git
zi snippet OMZP::history
# Binary release in archive, from GitHub-releases page.
# After automatic unpacking it provides program "fzf".
zi ice from"gh-r" as"program"
zi light junegunn/fzf

# One other binary release, it needs renaming from `docker-compose-Linux-x86_64`.
# This is done by ice-mod `mv'{from} -> {to}'. There are multiple packages per
# single version, for OS X, Linux and Windows – so ice-mod `bpick' is used to
# select Linux package – in this case this is actually not needed, Zinit will
# grep operating system name and architecture automatically when there's no `bpick'.
zi ice from"gh-r" as"program" mv"docker* -> docker-compose" bpick"*linux*"
zi load docker/compose

# Vim repository on GitHub – a typical source code that needs compilation – Zinit
# can manage it for you if you like, run `./configure` and other `make`, etc.
# Ice-mod `pick` selects a binary program to add to $PATH. You could also install the
# package under the path $ZPFX, see: https://zdharma-continuum.github.io/zinit/wiki/Compiling-programs
zi ice \
  as"program" \
  atclone"rm -f src/auto/config.cache; ./configure" \
  atpull"%atclone" \
  make \
  pick"src/vim"
zi light vim/vim

# Scripts built at install (there's single default make target, "install",
# and it constructs scripts by `cat'ing a few files). The make'' ice could also be:
# `make"install PREFIX=$ZPFX"`, if "install" wouldn't be the only default target.
zi ice as"program" pick"$ZPFX/bin/git-*" make"PREFIX=$ZPFX"
zi light tj/git-extras

# Handle completions without loading any plugin; see "clist" command.
# This one is to be ran just once, in interactive session.
# zi creinstall %HOME/my_completions

# For GNU ls (the binaries can be gls, gdircolors, e.g. on OS X when installing the
# coreutils package from Homebrew; you can also use https://github.com/ogham/exa)
zi ice atclone"dircolors -b LS_COLORS > c.zsh" atpull'%atclone' pick"c.zsh" nocompile'!'
zi light trapd00r/LS_COLORS

#####################
# NVM               #
#####################
# export NVM_COMPLETION=true
# export NVM_LAZY_LOAD=true
# export NVM_DIR="$HOME/.nvm"
# zinit light lukechilds/zsh-nvm
zinit ice wait lucid
zinit snippet OMZP::nvm


# shell extention
# zinit ice wait lucid atload'_zsh_autosuggest_start'; zinit light zsh-users/zsh-autosuggestions
# zinit ice wait'0' blockf atpull'zinit creinstall -q .'; zinit light zsh-users/zsh-completions
# zinit ice wait'0'; zinit light zdharma-continuum/fast-syntax-highlighting
zinit light ryutok/rust-zsh-completions
zinit ice pick'cli.zsh'; zinit light sudosubin/zsh-github-cli
zinit light Aloxaf/fzf-tab
zinit light chrissicool/zsh-256color
zinit light b4b4r07/enhancd
zinit ice depth=1; zinit light jeffreytse/zsh-vi-mode
# rust cil
zinit ice as"program" from"gh-r" mv"bat* -> bat" pick"bat/bat"; zinit light sharkdp/bat
zinit ice as"program" from"gh-r" mv"fd* -> fd" pick"fd/fd"; zinit light sharkdp/fd
zinit ice as"program" from"gh-r" mv"exa* -> exa" pick"exa/exa"; zinit light ogham/exa
zinit ice as"program" from"gh-r" pick"lsd*/lsd"; zinit light Peltoche/lsd
zinit ice as"program" from"gh-r" mv"hexyl* -> hexyl" pick"hexyl/hexyl"; zinit light sharkdp/hexyl
zinit ice as"program" from"gh-r" pick"delta*/delta"; zinit light dandavison/delta
zinit wait'1' lucid \
  from"gh-r" as"program" mv"tealdeer-* -> tldr" pick"tldr" \
  light-mode for @dbrgn/tealdeer
zinit ice wait'1' lucid as"completion" mv'zsh_tealdeer -> _tldr'
zinit ice as"program" from"gh-r" \
  pick"zoxide*/zoxide" \
  atload'eval "$(zoxide init zsh)"'
zinit light ajeetdsouza/zoxide

# zi cdclear -q # <- forget completions provided up to this moment

# HISTFILE=~/.zsh_history
# HISTSIZE=10000
# SAVEHIST=1000
# setopt appendhistory

# _evalcache zoxide init zsh # eval "$(zoxide init zsh)"
alias ..="z .."
alias ll="lsd -lhat"
alias dif="delta -ns"
alias updateAll="brew update ; brew upgrade ; zinit self-update; zinit update --parallel 40 ; .tmux/plugins/tpm/bin/update_plugins all ; vim +PlugUpgrade +PlugUpdate +PlugInstall +PlugClean +CocInstall +CocUpdateSync +qall"
alias readerPandoc="pandoc -f html -t plain"


if [[ ! -n $TMUX && $- == *l* ]]; then
  # get the IDs
  ID="`tmux list-sessions`"
  SESSION_TEMPLATE="`ls $HOME/.config/smug | sed -e \"s/\\.yml//g\"`"
  if [[ -z "$ID" ]]; then
    tmux new-session
  fi
  create_new_session="Create New Session"
  ID="$ID\n${create_new_session}:"
  ID="`echo $ID | fzf | cut -d: -f1`"
  if [[ "$ID" = "${create_new_session}" ]]; then
    tmux new-session
  elif [[ -n "$ID" ]]; then
    tmux attach-session -t "$ID"
  else
    :  # Start terminal normally
  fi
fi

enable-fzf-tab

{{ if eq .chezmoi.os "darwin" }}
{{   include ".zshrc_darwin" }}
{{ end }}
{{ if eq .chezmoi.os "linux" }}
{{   include ".zshrc_linux" }}
{{ end }}
